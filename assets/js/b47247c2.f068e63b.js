"use strict";(self.webpackChunkillium_documentation=self.webpackChunkillium_documentation||[]).push([[3246],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,d=u["".concat(s,".").concat(h)]||u[h]||f[h]||r;return n?i.createElement(d,a(a({ref:t},p),{},{components:n})):i.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(7462),o=(n(7294),n(3905));const r={sidebar_position:8},a="Notifications",c={unversionedId:"api/notifications",id:"api/notifications",title:"Notifications",description:"",source:"@site/docs/api/notifications.md",sourceDirName:"api",slug:"/api/notifications",permalink:"/api/notifications",draft:!1,editUrl:"https://github.com/project-illium/illium-documentation/docs/api/notifications.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"apiSidebar",previous:{title:"Data Messages",permalink:"/api/data-messages"}},s={},l=[],p={toc:l},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"notifications"},"Notifications"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"message TransactionNotification {\n    // The transaction in this notification has finalized and\n    // been added to the blockchain.\n    Transaction transaction = 1;\n    // The ID of the block containing the transaction\n    bytes block_ID          = 2;\n    // The height of the block containing the transaction\n    uint32 block_height     = 3;\n}\n\nmessage WalletTransactionNotification {\n    // The transaction in this notification has finalized and\n    // been added to the blockchain.\n    WalletTransaction transaction = 1;\n    // The ID of the block containing the transaction\n    bytes block_ID                = 2;\n    // The height of the block containing the transaction\n    uint32 block_height           = 3;\n} \n\nmessage WalletSyncNotification {\n    // The current height the wallet is synced up to\n    uint32 current_height = 1;\n    // The height of the chain that the wallet is syncing to\n    uint32 best_height    = 2;\n}\n\nmessage BlockNotification {\n    // The BlockInfo (including header data) for the block\n    BlockInfo block_info                  = 1;\n    // The blocks transactions (if requested).\n    //\n    // The transactions will either be returned in for or just the txids depending\n    // on the request.\n    repeated TransactionData transactions = 2;\n}\n\nmessage CompressedBlockNotification {\n    // A compressed block containing only the height,\n    // txids, outputs, and nullifiers.\n    CompressedBlock block = 1;\n}\n")))}f.isMDXComponent=!0}}]);