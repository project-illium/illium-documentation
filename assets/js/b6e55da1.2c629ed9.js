"use strict";(self.webpackChunkillium_documentation=self.webpackChunkillium_documentation||[]).push([[1580],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:10,description:"Security notes"},o="Deployment",s={unversionedId:"developers/deployment",id:"developers/deployment",title:"Deployment",description:"Security notes",source:"@site/docs/developers/deployment.md",sourceDirName:"developers",slug:"/developers/deployment",permalink:"/developers/deployment",draft:!1,editUrl:"https://github.com/project-illium/illium-documentation/docs/developers/deployment.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,description:"Security notes"},sidebar:"devSidebar",previous:{title:"Macros",permalink:"/developers/macros"},next:{title:"Security",permalink:"/developers/security"}},l={},c=[{value:"Generating an address from a script",id:"generating-an-address-from-a-script",level:3},{value:"Import the address into the wallet",id:"import-the-address-into-the-wallet",level:3},{value:"Send some coins to the address",id:"send-some-coins-to-the-address",level:3},{value:"Spend the utxo",id:"spend-the-utxo",level:3}],p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"deployment"},"Deployment"),(0,i.kt)("p",null,"In this section we'll cover how to create, deploy, and interact with a contract on chain."),(0,i.kt)("h3",{id:"generating-an-address-from-a-script"},"Generating an address from a script"),(0,i.kt)("p",null,"For our purpose's we'll be writing this in Go."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "crypto/rand"\n    "encoding/binary"\n    "path/filepath"\n    "fmt"\n    "github.com/project-illium/ilxd/crypto"\n    "github.com/project-illium/ilxd/params"\n    "github.com/project-illium/ilxd/types"\n    "github.com/project-illium/ilxd/zk"\n    "github.com/project-illium/ilxd/zk/lurk/macros"\n    "github.com/project-illium/walletlib"\n    "github.com/project-illium/ilxd/repo"\n    "github.com/project-illium/ilxd/rpc/pb"\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials"\n    "log"\n    "time"\n)\n\nfunc main() {\n    // This is an example timelock script\n    script := `\n            (lambda (locking-params unlocking-params input-index private-params public-params)\n                !(import std/crypto/checksig)\n                !(assert (<= !(param locktime-precision) 120))\n                !(assert (> !(param locktime) (car locking-params))\n                !(assert (checksig unlocking-params (cdr locking-params) !(param sighash)))\n                t\n            )   \n    `\n\n    // Run the script through the preprocessor to expand the macros\n    mp, err := macros.NewMacroPreprocessor(macros.WithStandardLib(), macros.RemoveComments())\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    script, err = mp.Preprocess(script)\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Compute the script commitment of the script\n    scriptCommitment, err := zk.LurkCommit(script)\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Well lock the coins for 10 mintues\n    lockUntil := time.Now().Add(time.Minute*10)\n    locktimeBytes := make([]byte, 8)\n    binary.BigEndian.PutUint64(locktimeBytes, uint64(lockUntil.Unix()))\n    \n    // Generate a key pair to use to sign the transaction\n    spendPriv, spendPub, err := crypto.GenerateNovaKey(rand.Reader)\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Lurk variables cannot exceed the maximum field element\n    // Typically public keeps are encoded in a compressed form\n    // that would exceed the maximum field element. Thus, to work\n    // with public keys in lurk we need to convert them to their \n    // uncompressed (x, y) format.\n    pubX, pubY := spendPub.(*crypto.NovaPublicKey).ToXY()\n    \n    // Create the locking script\n    lockingScript := types.LockingScript{\n        ScriptCommitment: scriptCommitment,\n        LockingParams:    [][]byte{locktimeBytes, pubX, pubY},\n    }\n    \n    // Generate an encryption keypair to use with this address\n    viewPriv, viewPub, err := crypto.GenerateCurve25519Key(rand.Reader)\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    address, err := walletlib.NewBasicAddress(lockingScript, viewPub, &params.MainnetParams)\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    fmt.Println(address)\n')),(0,i.kt)("h3",{id:"import-the-address-into-the-wallet"},"Import the address into the wallet"),(0,i.kt)("p",null,"We'll do this using the gRPC interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'    certificateFile := filepath.Join(repo.AppDataDir("ilxd", false), "rpc.cert")\n    creds, err := credentials.NewClientTLSFromFile(certificateFile, "localhost")\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    conn, err := grpc.Dial("localhost:5001", grpc.WithTransportCredentials(creds))\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer conn.Close()\n    walletClient := pb.NewWalletServiceClient(conn)\n    blockchainClient := pb.NewBlockchainServiceClient(conn)\n    \n    viewPrivBytes, err := crypto.MarshalPrivateKey(viewPriv)\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    _, err := walletClient.ImportAddress(context.Background(), &pb.ImportAddressRequest{\n        Address:          address.String(),\n        UnlockingScript:  lockingScript.Serialize(),\n        ViewPrivateKey:   viewPrivBytes,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n')),(0,i.kt)("h3",{id:"send-some-coins-to-the-address"},"Send some coins to the address"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"    resp, err := walletClient.Spend(context.Background(), &pb.SpendRequest{\n        ToAddress:        address.String(),\n        Amount:           10000000,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(types.NewID(resp.Transaction_ID).String())\n")),(0,i.kt)("h3",{id:"spend-the-utxo"},"Spend the utxo"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'    // Load the utxos from the wallet\n    utxoResp, err := walletClient.GetUtxos(context.Background(), &pb.GetUtxosRequest{})\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Grab the utxo for our address\n    var utxo *pb.Utxo\n    for _, u := range utxoResp.Utxos {\n        if u.Address == address.String() {\n            utxo = u\n            break\n        }\n    }\n\n    // Create a raw tranasction that spends from our utxo\n    createRawResp, err := walletClient.CreateRawTransaction(context.Background(), &pb.CreateRawTransactionRequest{\n        Inputs: []*pb.CreateRawTransactionRequest_Input{\n            {\n                CommitmentOrPrivateInput: &pb.CreateRawTransactionRequest_Input_Commitment{\n                    Commitment: utxo.Commitment,\n                },\n            },\n        },\n        Outputs: []*pb.CreateRawTransactionRequest_Output{\n            {\n                Address: "il1php93at5hy30ysynrjdwghygfqdm3k3k74ync7v658e6n6rccv6mg3rsmjrdcgr5h4x3atzzeemxp3ysztkr0t9jh55nfjaf6nkhtqsqq2knyp",\n                Amount:  9000000,\n            },\n        },\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Sign the transaction\n    sig, err := spendPriv.Sign(createRawResp.RawTx.Tx.GetStandardTransaction().SigHash())\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Like public keys, signatures will not normally fit within the\n    // max field element for lurk variables. Thus, we need to convert\n    // the signature to a format that will fit. In this case the signature\n    // consists of an R value (point) and an S value (scalar). So we\'ll\n    // convert the R value to its x, y coordinates.\n    sigRx, sigRy, sigS := crypto.UnmarshalSignature(sig)\n    \n    // Add the signature to the input\'s unlocking params. This needs to\n    // formatted as a lurk expression in the same format our locking script\n    // expects it to be. In this case a list.\n    createRawResp.RawTx.Inputs[0].UnlockingParams = fmt.Sprintf("(cons 0x%x (cons 0x%x (cons 0x%x nil)))", sigRx, sigRy, sigS)\n    \n    // We also need to provide the script because the wallet only knows of the\n    // script-commitment but not the actual script.\n    createRawResp.RawTx.Inputs[0].Script = script\n    \n    // Create the proof for the transaction\n    provedResp, err := walletClient.ProveRawTransaction(context.Background(), &pb.ProveRawTransactionRequest{\n        Tx: createRawResp.RawTx,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    // Broadcast to the network\n    submitResp, err := blockchainClient.SubmitTransaction(context.Background(), &pb.SubmitTransactionRequest{\n        Transaction: provedResp.ProvedTx,\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    \n    fmt.Println(types.NewID(submitResp.Transaction_ID).String())\n')))}m.isMDXComponent=!0}}]);